// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(AGENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  chatSessions ChatSession[]
  sops         Sop[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  AGENT
}

model SopCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sops Sop[]
}

model Sop {
  id         String      @id @default(cuid())
  categoryId String
  title      String
  content    String      @db.Text
  version    Int         @default(1)
  isActive   Boolean     @default(true)
  createdBy  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  category          SopCategory        @relation(fields: [categoryId], references: [id])
  creator           User               @relation(fields: [createdBy], references: [id])
  evidenceTemplates EvidenceTemplate[]
  chatMessages      ChatMessage[]
}

model EvidenceTemplate {
  id          String  @id @default(cuid())
  sopId       String
  description String
  exampleUrl  String?
  isRequired  Boolean @default(false)
  createdAt   DateTime @default(now())

  sop Sop @relation(fields: [sopId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  role          String // 'user' | 'assistant'
  content       String   @db.Text
  imageUrl      String?
  sopReferences String[] // Array of SOP IDs
  createdAt     DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sops    Sop[]
}
